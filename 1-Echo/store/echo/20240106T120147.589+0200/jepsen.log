2024-01-06 12:01:47,620{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin /Users/mohamed.elzien/go/bin/maelstrom-echo --node-count 1 --time-limit 10
2024-01-06 12:01:47,663{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x527e6bd3"
         "maelstrom.db$db$reify__16142@527e6bd3"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x3c634a04" "2024-01-06T12:01:47.589+02:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x4b48be5c"
         "maelstrom.net$jepsen_net$reify__15251@4b48be5c"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x3fe8d57a"
         "maelstrom.workload.echo$client$reify__16863@3fe8d57a"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x36573ec5"
         "java.util.concurrent.CyclicBarrier@36573ec5"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x10c26161"
         "jepsen.checker$compose$reify__11881@10c26161"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "/Users/mohamed.elzien/go/bin/maelstrom-echo"
  "--node-count"
  "1"
  "--time-limit"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@1ef6977b"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@674cd2da"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/Users/mohamed.elzien/go/bin/maelstrom-echo"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 10000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x34d776eb"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@34d776eb"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x60a3a0fa"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@60a3a0fa"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x17734113"
                                                    "maelstrom.workload.echo$workload$fn__16882@17734113"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x27aa700"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0xd15f98a"
         "maelstrom.net$jepsen_os$reify__15254@d15f98a"]
 :time-limit 10
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-01-06 12:01:48,480{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-01-06 12:01:48,480{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-01-06 12:01:48,481{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-01-06 12:01:48,482{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-01-06 12:01:48,483{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-01-06 12:01:48,483{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /Users/mohamed.elzien/go/bin/maelstrom-echo []
2024-01-06 12:01:48,743{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-01-06 12:01:48,758{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 44"
2024-01-06 12:01:48,760{GMT}	WARN	[n0 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Node n0 printed a line to STDOUT which was not well-formed JSON:
msg: {Src:c2 Dest:n0 Body:[123 34 101 99 104 111 34 58 34 80 108 101 97 115 101 32 101 99 104 111 32 52 52 34 44 34 116 121 112 101 34 58 34 101 99 104 111 34 44 34 109 115 103 95 105 100 34 58 49 125]}
Did you mean to encode this line as JSON? Or was this line intended for STDERR? See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg$fn__15856.invoke(process.clj:47)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:45)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-01-06 12:01:53,763{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:echo	"Please echo 44"	:net-timeout
2024-01-06 12:01:53,765{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:echo	"Please echo 82"
2024-01-06 12:01:56,937{GMT}	INFO	[Jepsen shutdown hook] jepsen.core: Downloading DB logs before JVM shutdown...
