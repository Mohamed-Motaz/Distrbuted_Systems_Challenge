2024-01-05 21:45:56,709{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin /Users/mohamed.elzien/go/bin/maelstrom-echo --node-count 1 --time-limit 10
2024-01-05 21:45:56,763{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x4867e76b"
         "maelstrom.db$db$reify__16142@4867e76b"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x4b48be5c" "2024-01-05T21:45:56.678+02:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x3fe8d57a"
         "maelstrom.net$jepsen_net$reify__15251@3fe8d57a"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x36573ec5"
         "maelstrom.workload.echo$client$reify__16863@36573ec5"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x10c26161"
         "java.util.concurrent.CyclicBarrier@10c26161"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x1ef6977b"
         "jepsen.checker$compose$reify__11881@1ef6977b"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "/Users/mohamed.elzien/go/bin/maelstrom-echo"
  "--node-count"
  "1"
  "--time-limit"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@674cd2da"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@686279e0"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/Users/mohamed.elzien/go/bin/maelstrom-echo"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 10000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x60a3a0fa"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@60a3a0fa"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x17734113"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@17734113"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x27aa700"
                                                    "maelstrom.workload.echo$workload$fn__16882@27aa700"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0xd15f98a"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x704c3ca2"
         "maelstrom.net$jepsen_os$reify__15254@704c3ca2"]
 :time-limit 10
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-01-05 21:45:57,798{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-01-05 21:45:57,799{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-01-05 21:45:57,800{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-01-05 21:45:57,802{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-01-05 21:45:57,802{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-01-05 21:45:57,803{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /Users/mohamed.elzien/go/bin/maelstrom-echo []
2024-01-05 21:45:58,939{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-01-05 21:45:58,952{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 66"
2024-01-05 21:45:58,957{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 66", :in_reply_to 1, :msg_id 1, :type "echo_ok"}
2024-01-05 21:45:59,085{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 78"
2024-01-05 21:45:59,086{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 78", :in_reply_to 2, :msg_id 2, :type "echo_ok"}
2024-01-05 21:45:59,144{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 60"
2024-01-05 21:45:59,145{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 60", :in_reply_to 3, :msg_id 3, :type "echo_ok"}
2024-01-05 21:45:59,256{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 81"
2024-01-05 21:45:59,258{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 81", :in_reply_to 4, :msg_id 4, :type "echo_ok"}
2024-01-05 21:45:59,575{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 37"
2024-01-05 21:45:59,577{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 37", :in_reply_to 5, :msg_id 5, :type "echo_ok"}
2024-01-05 21:45:59,802{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 73"
2024-01-05 21:45:59,805{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 73", :in_reply_to 6, :msg_id 6, :type "echo_ok"}
2024-01-05 21:46:00,021{GMT}	INFO	[Jepsen shutdown hook] jepsen.core: Downloading DB logs before JVM shutdown...
