package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	maelstrom "github.com/jepsen-io/maelstrom/demo/go"
)

// go install . && ~/Downloads/maelstrom/maelstrom test -w broadcast --bin ~/go/bin/maelstrom-broadcast --node-count 5 --time-limit 20 --rate 10 --nemesis partition

//Solution is very simple
//Simply broadcast to all nodes in the topology, (not all neighbors)
//and each node is responsible for gossiping to its neighbors
//This cycle stops when a node receives a message which it already has seen before,
//and at this points it stops sending this message
//Also need to keep track of which broadcasts have been acked, to retry those that haven't

var (
	node *maelstrom.Node

	messagesMu       sync.Mutex
	receivedMessages Set[int]

	topoMu   sync.Mutex
	topology []string

	broadcastChan chan (int)

	unAcknowledgedBroadcasts Set[string] //keep track of all unAckedBroadcasts
	unAckedBroadcastsMu      sync.Mutex
)

func Init() {

	node = maelstrom.NewNode()

	messagesMu = sync.Mutex{}
	receivedMessages = MakeSet[int]()

	topoMu = sync.Mutex{}
	topology = make([]string, 0)

	broadcastChan = make(chan int, 100000)

	unAcknowledgedBroadcasts = MakeSet[string]()
	unAckedBroadcastsMu = sync.Mutex{}

	go unAckedBroadcastsCleanup()
}

func GetBroadcastKey(msg int, node string) string {
	return fmt.Sprintf("%d-%s", msg, node)
}

// this is a worker thread that receives messages to broadcast,
// and is responsible for keeping track of notifying the neighbors
func broadcaster(n *maelstrom.Node) {

	for i := 0; i < 10; i++ {
		//start 10 threads to listen on broadcastChan and broadcast
		go func() {
			for {
				msg := <-broadcastChan

				for _, node := range topology {
					var body map[string]any = map[string]any{
						"type":    "broadcast_priv",
						"message": msg,
					}
					n.RPC(node, body, sendBroadcastPrivateHandler)

					unAckedBroadcastsMu.Lock()
					unAcknowledgedBroadcasts.Add(GetBroadcastKey(msg, node))
					unAckedBroadcastsMu.Unlock()
				}
			}

		}()
	}

}

func sendBroadcastPrivateHandler(msg maelstrom.Message) error {
	var body map[string]any
	if err := json.Unmarshal(msg.Body, &body); err != nil {
		return err
	}

	unAckedBroadcastsMu.Lock()
	unAcknowledgedBroadcasts.Delete(GetBroadcastKey(int(body["message"].(float64)), msg.Src))
	unAckedBroadcastsMu.Unlock()

	return nil
}

// this is a worker thread that is responsible for re-sending every unAcked broadcast again
// it runs every 900 ms
func unAckedBroadcastsCleanup() {
	for {
		unAckedBroadcastsMu.Lock()

		for _, k := range unAcknowledgedBroadcasts.GetKeys() {
			//re-add this message to the channel to attempt to rebroadcast

			newMsg, _ := strconv.Atoi(strings.Split(k, "-")[0])
			go func(msg int) {
				broadcastChan <- msg
			}(newMsg)

			unAcknowledgedBroadcasts.Delete(k) //delete from the set as it has been handled
		}

		unAckedBroadcastsMu.Unlock()

		time.Sleep(900 * time.Millisecond)
	}
}

func main() {
	Init()

	broadcaster(node)

	node.Handle("broadcast_priv", broadcast_privHandler)
	node.Handle("broadcast", broadcastHandler)
	node.Handle("read", readHandler)
	node.Handle("topology", topologyHandler)

	if err := node.Run(); err != nil {
		log.Fatal(err)
		os.Exit(1)
	}

}

func broadcast_privHandler(msg maelstrom.Message) error {

	// Unmarshal the message body as an loosely-typed map.
	var body map[string]any
	if err := json.Unmarshal(msg.Body, &body); err != nil {
		return err
	}

	// Update the message type to return back.
	body["type"] = "broadcast_priv_ok"

	shouldBroadcast := false
	messagesMu.Lock()
	if !receivedMessages.Exists(int(body["message"].(float64))) {
		receivedMessages.Add(int(body["message"].(float64)))
		shouldBroadcast = true
	}
	messagesMu.Unlock()

	if shouldBroadcast {
		broadcastChan <- int(body["message"].(float64))
	}

	// delete(body, "message") don't delete the message in the priv handler

	// Echo the original message back with the updated message type.
	return node.Reply(msg, body)
}

func broadcastHandler(msg maelstrom.Message) error {

	// Unmarshal the message body as an loosely-typed map.
	var body map[string]any
	if err := json.Unmarshal(msg.Body, &body); err != nil {
		return err
	}

	// Update the message type to return back.
	body["type"] = "broadcast_ok"

	shouldBroadcast := false
	messagesMu.Lock()
	if !receivedMessages.Exists(int(body["message"].(float64))) {
		receivedMessages.Add(int(body["message"].(float64)))
		shouldBroadcast = true
	}
	messagesMu.Unlock()

	if shouldBroadcast {
		broadcastChan <- int(body["message"].(float64))
	}

	delete(body, "message")

	// Echo the original message back with the updated message type.
	return node.Reply(msg, body)
}

func readHandler(msg maelstrom.Message) error {

	// Unmarshal the message body as an loosely-typed map.
	var body map[string]any
	if err := json.Unmarshal(msg.Body, &body); err != nil {
		return err
	}

	// Update the message type to return back.
	body["type"] = "read_ok"

	messagesMu.Lock()
	body["messages"] = receivedMessages.GetKeys()
	messagesMu.Unlock()

	// Echo the original message back with the updated message type.
	return node.Reply(msg, body)
}

func topologyHandler(msg maelstrom.Message) error {

	// Unmarshal the message body as an loosely-typed map.
	var body map[string]any
	if err := json.Unmarshal(msg.Body, &body); err != nil {
		return err
	}

	// Update the message type to return back.
	body["type"] = "topology_ok"

	topoMu.Lock()
	tArr := body["topology"].(map[string]interface{})[node.ID()].([]interface{})
	topology = make([]string, 0) //clear the topology
	for _, v := range tArr {
		topology = append(topology, v.(string))
	}
	topoMu.Unlock()

	delete(body, "topology")
	// Echo the original message back with the updated message type.
	return node.Reply(msg, body)
}
